// JavaScript

// Start of function Node
function Node(data) {
    this.data = data;
    this.left = null;
    this.right = null;
}; // End of function Node

// Start of function BinarySearchTree
function BinarySearchTree() {
    this.insert = function(root, data) {
        if (root === null) {
            this.root = new Node(data);
            
            return this.root;
        }
        
        if (data <= root.data) {
            if (root.left) {
                this.insert(root.left, data);
            } else {
                root.left = new Node(data);
            }
        } else {
            if (root.right) {
                this.insert(root.right, data);
            } else {
                root.right = new Node(data);
            }
        }
        
        return this.root;
    };
    
    // Start of function levelOrder
    this.levelOrder = function(root) {
      var queue = [];
      if (root) {
        queue.push(root);
        while (queue.length > 0) {
          tree = queue.shift();
            process.stdout.write(tree.data + ' '); 
            if (tree.left) {
              queue.push(tree.left);
            }
            if (tree.right) {
              queue.push(tree.right);
            }
          }
      }

    }
}


    var tree = new BinarySearchTree();
    var root = null;
    
    root = tree.insert(root, 3);
    root = tree.insert(root, 5);
    root = tree.insert(root, 4);
    root = tree.insert(root, 7);
    root = tree.insert(root, 2);
    root = tree.insert(root, 1);
    
    tree.levelOrder(root);
