4clojure.com Completed Problem List
 (*) marks interesting problems
 (R) purely recursive process, compare to our-remove-if (On Lisp, p. 15)
 (I) iterative process, compare to good-reverse (On Lisp, p. 30)
 (F) functional style
 
1. Nothing but the Truth
2. Simple Math
3. Intro to Strings
4. Intro to Lists
5. Conj
6. Intro to Vectors
7. Vectors: conj
8. Intro to Sets
9. Sets: conj
10. Intro to Maps
11. Maps: conj
12. Intro to Sequences
13. Sequences: rest
14. Intro to Functions
15. Double Down
16. Hello World
17. Sequences: map
18. Sequences: filter
19. Last Element
20. Penultimate Element
 * 21. Nth Element (R) *
22. Count a Sequence
 * 23. Reverse a Sequence (I) *
24. Sum It All Up
25. Find the Odd Numbers
 * 26. Fibonacci Sequence (R) *
27. Palindrome Detector
 * 28. Flatten a Sequence (R) *
29. Get the Caps
30. Compress a Sequence
31. Pack a Sequence
32. Duplicate a Sequence (R)
33. Replicate a Sequence (I)
34. Implement range (I)
35. Local Bindings
36. Let it Be
37.     SKIP Regular Expressions
38. Maximum Value
39. Interleave Two Seqs (I)
40. Interpose a Seq (R)
41. Drop Every Nth Item 
 * 42. Factorial Fun (R, I, F) *
43. Reverse Interleave
44. Rotate Sequence
45.     SKIP Intro to Iterate
46. Flipping out
47.     SKIP Contain Yourself
48. Intro to some
49. 
50. 
51. 
52. 
53. 
54. 
55. 
56. 
57. 
58. 
59. 
60. 
61. 
62. 
63. 
64. 
65. 
66. 
67. 
68. 
69. 
70. 
71. 
72. 
73. 
74. 
75. 
76. 
77. 
78. 
79. 
80. 
81. 
82. 
83. 
84. 
85. 
86. 
87. 
88. 
89. 
90. 
91. 
92. 
93. 
94. 
95. 
96. 
97. 
98. 
99. 
100. 
101. 
102. 
103. 
104. 
105. 
106. 
107. 
108. 
109. 
110. 
111. 
112. 
113. 
114. 
115. 
116. 
117. 
118. 
119. 
120. 
121. 
122. 
123. 
124. 
125. 
126. 
127. 
128. 
129. 
130. 
131. 
132. 
133. 
134. 
135. 
136. 
137. 
138. 
139. 
140. 
141. 
142. 
143. 
144. 
145. 
146. 
147. 
148. 
149. 
150. 
151. 
152. 
153. 
154. 
155. 
156. 

Extra
- Append
- Flatten only one level deep
- Repeat a list
