(defun print-board (board)
  (format t "  ")
  (let ((col-names "abcdefghijklmnopqrstuvwxyz"))
    (dotimes (col (length (first board)))
      (format t "~A " (char col-names col))))
  (format t "~%")
  (dotimes (row (length board))
    (format t "~A " (1+ row))
    (dotimes (col (length (nth row board)))
      (format t "~A " (nth col (nth row board))))
    (format t "~%")))

(defun update-board (board new-row new-col new-symbol)
  (setf (nth new-col (nth new-row board)) new-symbol))

(defun board-value (board row col)
  (nth col (nth row board)))

(defun exists-on-board (board symbol)
  (let ((result nil))
    (dotimes (row (length board))
      (dotimes (col (length (nth row board)))
        (if (equal symbol (board-value board row col))
            (setf result t))))
    result))

(defun shoot (board player-view shot-row shot-col)
  (let ((rows (length board))
        (cols (length (first board)))
        (target (board-value board shot-row shot-col)))
    (cond ((or (< shot-row 0) (< shot-col 0) (> shot-row (1- rows)) (> shot-col (1- cols)))
           (format t "Out of bounds.")
           board)
          ((equal target 'O)
           (format t "Splash!")
           (update-board board shot-row shot-col 'N)
           (update-board player-view shot-row shot-col 'N))
          ((or (equal target 'X) (equal target 'N))
           (format t "You already shot there."))
          (t (format t "Boom! ")
             (update-board board shot-row shot-col 'X)
             (update-board player-view shot-row shot-col 'X)
             (if (not (exists-on-board board target))
                 (format t "~A ship sunk!" target))))))

(defun coords-to-num (coords)
  (values
   (1- (parse-integer (subseq coords 1)))
   (position (subseq coords 0 1) '("A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z") :test #'equal)))

(defun abc-to-num (letter index sequence)
  (if (> index (length sequence))
      nil
      (if (equal letter (nth index sequence))
          index
          (abc-to-num letter (1+ index) sequence))))

(defparameter *target*
  '((O O O O O O O O O O O O O)
    (O B B B B B O O O O O O O)
    (C O O O O O O O O O O O O)
    (C O O O O O A A A A O O O)
    (O O O O O O O O O O D O O)
    (O O O O O O O O O O D O O)
    (O O O O O O O O O O D O O)
    (O O O O O O O O O O O O O)))

(defparameter *player-view*
  '((O O O O O O O O O O O O O)
    (O O O O O O O O O O O O O)
    (O O O O O O O O O O O O O)
    (O O O O O O O O O O O O O)
    (O O O O O O O O O O O O O)
    (O O O O O O O O O O O O O)
    (O O O O O O O O O O O O O)
    (O O O O O O O O O O O O O)))

(defparameter *player-ships*
  '((O O O O O O O O O O O O O)
    (O O O B O O O O O O O O O)
    (O O O B O O O O O O O O O)
    (D D D B O O O O A A A A O)
    (O O O B O O O O O O O O O)
    (O O O B O O O O O O O O O)
    (O O O O O C C O O O O O O)
    (O O O O O O O O O O O O O)))

(defun ask-player ()
  (print-board *player-view*)
  (format t "Select target coords: ")
  (let ((player-shot (symbol-name (read))))
    (multiple-value-bind (shot-row shot-col) (coords-to-num player-shot)
      (shoot *target* *player-view* shot-row shot-col))))
